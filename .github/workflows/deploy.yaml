name: Build & Push Docker Image

on:
    push: 
    workflow_dispatch: ~

jobs:
    build:
        name: Docker build & push image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: Set ENV to build
              run: |
                  # get id of issue
                  tag=$(echo "$GITHUB_REF_NAME" | grep -oE '[0-9]+')
                  if [[ ${{github.ref}} == 'refs/tags/'* ]]; then
                    tag=$(echo ${{github.ref}} | sed -e 's/refs\/tags\///')
                  elif [[ ${{github.ref}} == 'refs/heads/develop' ]]; then
                    tag=develop
                  elif [[ ${{github.ref}} == 'refs/heads/main' ]]; then
                    tag=latest
                  fi
                  
                  echo "DOCKER_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:$tag" >> $GITHUB_ENV
            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  platforms: linux/amd64, linux/arm64
                  target: frankenphp_prod
                  push: true
                  tags: ${{env.DOCKER_IMAGE_NAME}}
            - name: executing remote ssh commands using password
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USERNAME }}
                  key: ${{ secrets.SSH_KEY }}
                  passphrase: ${{ secrets.SSH_PASSPHRASE }}
                  script: |
                      j vision
                      castor list
#                      docker volume create ${{env.CONTAINER_NAME}}-uploads;
#                      
#                      docker stop ${{env.CONTAINER_NAME}} || true;
#                      
#                      docker run --pull always -i --rm --name ${{env.CONTAINER_NAME}} -p ${{env.PORT}}:80 -v ${{env.CONTAINER_NAME}}-var:/srv/app/var -v ${{env.CONTAINER_NAME}}-uploads:/srv/app/public/uploads -e DATABASE_URL=${{ secrets.DATABASE_URL }}-${{ env.ENV }} -e APP_SECRET=${{ secrets.APP_SECRET }} -d ${{env.DOCKER_IMAGE_NAME}};
#                      
#                      docker exec -i ${{env.CONTAINER_NAME}} symfony composer install;
#                      docker exec -i ${{env.CONTAINER_NAME}} chmod -R 777 var/ public/uploads/;
#                      
#                      # create database
#                      docker exec -i ${{env.CONTAINER_NAME}} symfony console d:d:c --if-not-exists;
#                      
#                      # run migrations
#                      docker exec -i ${{env.CONTAINER_NAME}} symfony console d:m:m -n;
#                      
#                      # list running containers
#                      docker ps;
#                      docker logs ${{env.CONTAINER_NAME}};
